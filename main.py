import os
import asyncio
import nest_asyncio
nest_asyncio.apply()
import logging
import httpx
from flask import Flask, request, jsonify

# –ü–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è
OPENROUTER_API_KEY = os.getenv("OPENROUTER_API_KEY")
AILEX_SHARED_SECRET = os.getenv("AILEX_SHARED_SECRET")

app = Flask(__name__)
logging.basicConfig(level=logging.INFO)

# –ê—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏
async def generate_tool(task: str, params: dict) -> dict:
    headers = {
        'Authorization': f'Bearer {OPENROUTER_API_KEY}'
    }
    payload = {
        'model': "meta-llama/llama-4-maverick",
        'messages': [
            {"role": "system", "content": f"Create the tool:\n{task}"},
            {"role": "user", "content": str(params)}
        ]
    }
    async with httpx.AsyncClient() as client:
        response = await client.post("https://openrouter.ai/api/v1/chat/completions", json=payload, headers=headers)
        return response.json()

# üåê –≠–Ω–¥–ø–æ–∏–Ω—Ç –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–∞
@app.route("/generate_tool", methods=["POST"])
def handle_generate_tool():
    if request.headers.get("Ailex-Shared-Secret") != AILEX_SHARED_SECRET:
        return jsonify({"error": "Forbidden"}), 403
    try:
        data = request.get_json()
        logging.info(f"[TOOL] –ó–∞–ø—Ä–æ—Å –ø–æ–ª—É—á–µ–Ω: {data}")
        task = data.get("task")
        params = data.get("params")
        if not task or params is None:
            return jsonify({"error": "Invalid data"}), 400
        loop = asyncio.get_event_loop()
        tool = loop.run_until_complete(generate_tool(task, params))
        return jsonify(tool)
    except Exception as e:
        logging.error(f"Error: {e}")
        return jsonify({"error": str(e)}), 500


# –ì–ª–∞–≤–Ω–∞—è —Å—Ç—Ä–∞–Ω–∏—Ü–∞ –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏
@app.route("/")
def index():
    return "Tool is alive!"

# –ó–∞–ø—É—Å–∫ —Å–µ—Ä–≤–µ—Ä–∞
if __name__ == "__main__":
    app.run(host="0.0.0.0", port=int(os.environ.get("PORT", 8080)))
