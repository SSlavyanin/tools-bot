import os
import logging
import json
import threading
from flask import Flask
from aiogram import Bot, Dispatcher, types
from aiogram.types import InlineKeyboardMarkup, InlineKeyboardButton, InputFile
from aiogram.utils import executor
from aiogram.dispatcher.filters import CommandStart
from io import BytesIO
from zipfile import ZipFile
import httpx

# üîê –¢–æ–∫–µ–Ω—ã –∏ –∫–ª—é—á–∏
BOT_TOKEN = os.getenv("TOOLBOT_TOKEN")
OPENROUTER_API_KEY = os.getenv("OPENROUTER_API_KEY")

bot = Bot(token=BOT_TOKEN, parse_mode="HTML")
dp = Dispatcher(bot)
logging.basicConfig(level=logging.INFO)

app = Flask(__name__)

# üß† –ò—Å—Ç–æ—Ä–∏—è —Å–æ–æ–±—â–µ–Ω–∏–π –ø–æ –∫–∞–∂–¥–æ–º—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
sessions = {}

# üß† –ü–∞—Ä—Å–∏–Ω–≥ JSON –∏–∑ —Ç–µ–∫—Å—Ç–∞
def extract_json(text: str) -> dict:
    try:
        start = text.index("{")
        end = text.rindex("}") + 1
        return json.loads(text[start:end])
    except Exception:
        return None

# üîç –ê–Ω–∞–ª–∏–∑ —Å–æ–æ–±—â–µ–Ω–∏—è —á–µ—Ä–µ–∑ OpenRouter
async def analyze_message(history: str):
    prompt = [
        {
            "role": "system",
            "content": (
                "–¢—ã ‚Äî –ò–ò-–∫–æ–Ω—Å—Ç—Ä—É–∫—Ç–æ—Ä –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–æ–≤. –ü–æ–ª—É—á–∞–µ—à—å —Å–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏ –ø–æ–º–æ–≥–∞–µ—à—å —Å—Ñ–æ—Ä–º—É–ª–∏—Ä–æ–≤–∞—Ç—å –∑–∞–¥–∞–Ω–∏–µ. "
                "–ó–∞–¥–∞–≤–∞–π —É—Ç–æ—á–Ω—è—é—â–∏–µ –≤–æ–ø—Ä–æ—Å—ã, –µ—Å–ª–∏ —á—Ç–æ-—Ç–æ –Ω–µ—è—Å–Ω–æ. " 
                "–ö–æ–≥–¥–∞ –≤—Å—ë –ø–æ–Ω—è—Ç–Ω–æ ‚Äî –≤–æ–∑–≤—Ä–∞—â–∞–µ—à—å JSON —Å:\n"
                "- status: 'ready' –∏–ª–∏ 'need_more_info'\n"
                "- reply: —á—Ç–æ —Å–∫–∞–∑–∞—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é\n"
                "- task: –∫—Ä–∞—Ç–∫–æ–µ –æ–ø–∏—Å–∞–Ω–∏–µ\n"
                "- params: –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –∑–∞–¥–∞—á–∏ (dict)"\n
                "–ö–æ–≥–¥–∞ –≤—Å—ë —è—Å–Ω–æ –≤ –ø–æ—Å—Ç–∞–≤–ª–µ–Ω–æ–π –∑–∞–¥–∞—á–µ –ø–æ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–∞ ‚Äî —É—Ç–æ—á–Ω–∏ —É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è, –º–æ–∂–Ω–æ –ª–∏ –Ω–∞—á–∏–Ω–∞—Ç—å –≥–µ–Ω–µ—Ä–∞—Ü–∏—é –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–∞. "
            )
        },
        {"role": "user", "content": history}
    ]

    headers = {
        "Authorization": f"Bearer {OPENROUTER_API_KEY}",
        "Content-Type": "application/json"
    }

    payload = {"model": "openchat/openchat-7b", "messages": prompt}

    async with httpx.AsyncClient() as client:
        response = await client.post("https://openrouter.ai/api/v1/chat/completions", json=payload, headers=headers)
        result = response.json()
        content = result["choices"][0]["message"]["content"]

        result_dict = extract_json(content)
        if not result_dict:
            return {"status": "need_more_info", "reply": content.strip()}

        return {
            "status": result_dict.get("status", "need_more_info"),
            "reply": result_dict.get("reply", content.strip()),
            "task": result_dict.get("task"),
            "params": result_dict.get("params"),
        }

# üõ† –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –∫–æ–¥–∞ –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–∞
def generate_code(task, params):
    lines = [f"# –ò–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç: {task}", "# –ü–∞—Ä–∞–º–µ—Ç—Ä—ã:"]
    for k, v in params.items():
        lines.append(f"# {k}: {v}")
    lines.append("\nprint('–ò–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç –≥–æ—Ç–æ–≤ –∫ —Ä–∞–±–æ—Ç–µ!')")
    return "\n".join(lines)

# üì¶ –°–æ–∑–¥–∞–Ω–∏–µ ZIP-–∞—Ä—Ö–∏–≤–∞
def create_zip(task, code: str):
    zip_buffer = BytesIO()
    with ZipFile(zip_buffer, 'w') as zip_file:
        filename = f"{task.replace(' ', '_')}.py"
        zip_file.writestr(filename, code)
    zip_buffer.seek(0)
    zip_buffer.name = f"{task.replace(' ', '_')}.zip"
    return zip_buffer

# üéõ –ö–Ω–æ–ø–∫–∞ "–°–¥–µ–ª–∞—Ç—å –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç"
@dp.message_handler(commands=["start", "tool"])
async def start_command(message: types.Message):
    kb = InlineKeyboardMarkup().add(
        InlineKeyboardButton("üõ† –°–¥–µ–ª–∞—Ç—å –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç", callback_data="make_tool")
    )
    await message.reply("–ù–∞–∂–º–∏ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ, —á—Ç–æ–±—ã –Ω–∞—á–∞—Ç—å —Å–æ–∑–¥–∞–Ω–∏–µ –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–∞:", reply_markup=kb)

# üîò –û–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–∞–∂–∞—Ç–∏—è –Ω–∞ –∫–Ω–æ–ø–∫—É
@dp.callback_query_handler(lambda c: c.data == "make_tool")
async def handle_tool_request(callback_query: types.CallbackQuery):
    user_id = callback_query.from_user.id
    sessions[user_id] = []  # –Ω–∞—á–∏–Ω–∞–µ–º —Å —á–∏—Å—Ç–æ–π –∏—Å—Ç–æ—Ä–∏–∏
    await bot.send_message(user_id, "–ü—Ä–∏–≤–µ—Ç! –û–ø–∏—à–∏, –∫–∞–∫–æ–π –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç —Ç–µ–±–µ –Ω—É–∂–µ–Ω üß†")
    await callback_query.answer()

# üì© –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—Å–µ—Ö —Å–æ–æ–±—â–µ–Ω–∏–π –ø–æ—Å–ª–µ –Ω–∞–∂–∞—Ç–∏—è –∫–Ω–æ–ø–∫–∏
@dp.message_handler()
async def handle_message(message: types.Message):
    user_id = message.from_user.id
    text = message.text.strip()

    history = sessions.setdefault(user_id, [])
    history.append(text)

    result = await analyze_message("\n".join(history))
    status = result.get("status")
    reply = result.get("reply")

    if status == "need_more_info":
        await message.answer(reply)
    elif status == "ready":
        task = result.get("task")
        params = result.get("params")
        code = generate_code(task, params)
        zip_file = create_zip(task, code)

        await message.answer("‚úÖ –ò–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç –≥–æ—Ç–æ–≤! –í–æ—Ç –∞—Ä—Ö–∏–≤:")
        await message.answer_document(InputFile(zip_file))

        sessions.pop(user_id, None)
    else:
        await message.answer("‚ö†Ô∏è –ß—Ç–æ-—Ç–æ –ø–æ—à–ª–æ –Ω–µ —Ç–∞–∫. –ü–æ–ø—Ä–æ–±—É–π –µ—â—ë —Ä–∞–∑.")

# üåê Flask-—Å–µ—Ä–≤–µ—Ä –¥–ª—è Render
@app.route("/")
def index():
    return "ToolBot —Ä–∞–±–æ—Ç–∞–µ—Ç!"

# üöÄ –ó–∞–ø—É—Å–∫ Flask + aiogram
if __name__ == "__main__":
    threading.Thread(target=lambda: executor.start_polling(dp, skip_updates=True)).start()
    app.run(host="0.0.0.0", port=int(os.environ.get("PORT", 5000)))
