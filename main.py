import os
import logging
from flask import Flask, request, jsonify, send_file
from zipfile import ZipFile
from io import BytesIO
import httpx
import json
import re

app = Flask(__name__)
logging.basicConfig(level=logging.INFO)

OPENROUTER_API_KEY = os.getenv("OPENROUTER_API_KEY")
AILEX_SHARED_SECRET = os.getenv("AILEX_SHARED_SECRET")

zip_storage = {}
sessions = {}  # üß† –•—Ä–∞–Ω–∏–º –∏—Å—Ç–æ—Ä–∏—é –æ–±—â–µ–Ω–∏—è –ø–æ user_id

# üß† –ü–∞—Ä—Å–µ—Ä JSON –∏–∑ —Ç–µ–∫—Å—Ç–∞
def extract_json(text: str) -> dict:
    try:
        start = text.index("{")
        end = text.rindex("}") + 1
        json_str = text[start:end]
        return json.loads(json_str)
    except Exception:
        return None  # ‚¨Ö –≤–º–µ—Å—Ç–æ ValueError ‚Äî –≤–æ–∑–≤—Ä–∞—â–∞–µ–º None

    
# üîç –û–±—Ä–∞—â–µ–Ω–∏–µ –∫ OpenRouter —Å –∑–∞–¥–∞—á–µ–π
async def analyze_message(text: str):
    prompt = [
        {
            "role": "system",
            "content": (
                "–¢—ã ‚Äî –ò–ò-–∫–æ–Ω—Å—Ç—Ä—É–∫—Ç–æ—Ä –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–æ–≤. –ü–æ–ª—É—á–∞–µ—à—å —Å–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏ –ø–æ–º–æ–≥–∞–µ—à—å —Å—Ñ–æ—Ä–º—É–ª–∏—Ä–æ–≤–∞—Ç—å –∑–∞–¥–∞–Ω–∏–µ. "
                "–ó–∞–¥–∞–≤–∞–π —É—Ç–æ—á–Ω—è—é—â–∏–µ –≤–æ–ø—Ä–æ—Å—ã, –µ—Å–ª–∏ —á—Ç–æ-—Ç–æ –Ω–µ—è—Å–Ω–æ. –ö–æ–≥–¥–∞ –≤—Å—ë —è—Å–Ω–æ ‚Äî —É—Ç–æ—á–Ω–∏ —É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è, –º–æ–∂–Ω–æ –ª–∏ –Ω–∞—á–∏–Ω–∞—Ç—å –≥–µ–Ω–µ—Ä–∞—Ü–∏—é. "
                "–í–µ—Ä–Ω–∏ _—Ç–æ–ª—å–∫–æ_ JSON –≤ –≤–∏–¥–µ Python —Å–ª–æ–≤–∞—Ä—è (dict), –±–µ–∑ –æ–±—Ä–∞–º–ª—è—é—â–µ–≥–æ —Ç–µ–∫—Å—Ç–∞. "
                "–ü–æ–ª—è:\n"
                "- status: 'need_more_info' –∏–ª–∏ 'ready';\n"
                "- reply: —Å—Ç—Ä–æ–∫–∞ —Å –æ—Ç–≤–µ—Ç–æ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é;\n"
                "- task: –∫—Ä–∞—Ç–∫–æ–µ –æ–ø–∏—Å–∞–Ω–∏–µ –∑–∞–¥–∞—á–∏ (–µ—Å–ª–∏ ready);\n"
                "- params: —Å–ª–æ–≤–∞—Ä—å –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤ (–µ—Å–ª–∏ ready)."
            )
        },
        {"role": "user", "content": text}
    ]

    headers = {
        "Authorization": f"Bearer {OPENROUTER_API_KEY}",
        "Content-Type": "application/json"
    }

    payload = {
        "model": "openchat/openchat-7b",  # –ú–æ–∂–Ω–æ –∑–∞–º–µ–Ω–∏—Ç—å –º–æ–¥–µ–ª—å
        "messages": prompt
    }

    async with httpx.AsyncClient() as client:
        response = await client.post("https://openrouter.ai/api/v1/chat/completions", json=payload, headers=headers)
        result = response.json()
        content = result["choices"][0]["message"]["content"]
        logging.info(f"[OpenRouter] –û—Ç–≤–µ—Ç: {content}")

        # –ü—ã—Ç–∞–µ–º—Å—è —Ä–∞—Å–ø–∞—Ä—Å–∏—Ç—å –æ—Ç–≤–µ—Ç –∫–∞–∫ JSON
        content = await call_openrouter(text)
        result_dict = extract_json(content)

        if not result_dict:
            return {
                "status": "need_more_info",
                "reply": content.strip(),  # –í–æ–∑–≤—Ä–∞—â–∞–µ–º —Ç–µ–∫—Å—Ç –æ—Ç–≤–µ—Ç–∞ –±–µ–∑ –∏–∑–º–µ–Ω–µ–Ω–∏–π
                "task": None,
                "params": None
            }
    
        return {
            "status": result_dict.get("status", "need_more_info"),
            "reply": result_dict.get("reply", content.strip()),
            "task": result_dict.get("task"),
            "params": result_dict.get("params"),
        }

            

# üõ† –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –ø—Ä–æ—Å—Ç–æ–≥–æ Python-—Å–∫—Ä–∏–ø—Ç–∞
def generate_code(task, params):
    lines = [f"# –ò–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç: {task}", "# –ü–∞—Ä–∞–º–µ—Ç—Ä—ã:"]
    for k, v in params.items():
        lines.append(f"# {k}: {v}")
    lines.append("\nprint('–ò–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç –≥–æ—Ç–æ–≤ –∫ —Ä–∞–±–æ—Ç–µ!')")
    return "\n".join(lines)

# üì¶ –û—Å–Ω–æ–≤–Ω–æ–π –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–∞
@app.route("/generate_tool", methods=["POST"])
def generate_tool():
    from asyncio import run

    data = request.get_json()
    if request.headers.get("Ailex-Shared-Secret") != AILEX_SHARED_SECRET:
        return jsonify({"status": "error", "message": "‚õî –ù–µ–≤–µ—Ä–Ω—ã–π —Å–µ–∫—Ä–µ—Ç. ü§ñ (t—É–ª—Å-–±–æ—Ç)"}), 403

    user_id = str(data.get("user_id", "anonymous"))
    message = data.get("message", "").strip()

    if not message:
        return jsonify({"status": "error", "message": "–ü—É—Å—Ç–æ–π –∑–∞–ø—Ä–æ—Å. ü§ñ (t—É–ª—Å-–±–æ—Ç)"})

    # üí¨ –û–±–Ω–æ–≤–ª—è–µ–º –∏—Å—Ç–æ—Ä–∏—é
    history = sessions.setdefault(user_id, {"history": []})["history"]
    history.append(message)

    try:
        result = run(analyze_message("\n".join(history)))
        status = result.get("status")
        reply = result.get("reply", "ü§î –ß—Ç–æ-—Ç–æ –ø–æ—à–ª–æ –Ω–µ —Ç–∞–∫.")

        if status == "need_more_info":
            return jsonify({"status": "ok", "message": reply})

        elif status == "ready":
            task = result.get("task", "–∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç")
            params = result.get("params", {})

            code = generate_code(task, params)

            zip_buffer = BytesIO()
            with ZipFile(zip_buffer, 'w') as zip_file:
                zip_file.writestr(f"{task.replace(' ', '_')}.py", code)
            zip_buffer.seek(0)
            zip_storage[user_id] = zip_buffer

            return jsonify({
                "status": "done",
                "message": f"ü§ñ (t—É–ª—Å-–±–æ—Ç) ‚úÖ –ò–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç –≥–æ—Ç–æ–≤! <a href='https://tools-bot.onrender.com/download_tool/{user_id}'>–°–∫–∞—á–∞—Ç—å –∞—Ä—Ö–∏–≤</a>"
            })

        else:
            return jsonify({"status": "error", "message": "‚ö†Ô∏è –ù–µ–æ–∂–∏–¥–∞–Ω–Ω—ã–π —Å—Ç–∞—Ç—É—Å –æ—Ç –ò–ò."})

    except Exception as e:
        logging.exception("–û—à–∏–±–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏")
        return jsonify({"status": "error", "message": f"ü§ñ (t—É–ª—Å-–±–æ—Ç) –û—à–∏–±–∫–∞: {str(e)}"})

# üì• –í—ã–¥–∞—á–∞ –∞—Ä—Ö–∏–≤–∞
@app.route("/download_tool/<user_id>")
def download_tool(user_id):
    buffer = zip_storage.get(user_id)
    if not buffer:
        return "–ê—Ä—Ö–∏–≤ –Ω–µ –Ω–∞–π–¥–µ–Ω", 404
    return send_file(buffer, as_attachment=True, download_name=f"{user_id}_tool.zip")

@app.route("/")
def home():
    return "ü§ñ Tools API (—Å –ò–ò) —Ä–∞–±–æ—Ç–∞–µ—Ç!"

if __name__ == "__main__":
    port = int(os.environ.get("PORT", 5000))
    app.run(host="0.0.0.0", port=port)
