import os
import logging
from flask import Flask, request, jsonify
import httpx

# üîê –ü–µ—Ä–µ–º–µ–Ω–Ω—ã–µ —Å—Ä–µ–¥—ã
AILEX_SHARED_SECRET = os.getenv("AILEX_SHARED_SECRET")
OPENROUTER_API_KEY = os.getenv("OPENROUTER_API_KEY")

app = Flask(__name__)

FLASK_ENV=development
# –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –æ–∫—Ä—É–∂–µ–Ω–∏–µ
if __name__ == "__main__":
    # –ï—Å–ª–∏ –ø–µ—Ä–µ–º–µ–Ω–Ω–∞—è –æ–∫—Ä—É–∂–µ–Ω–∏—è FLASK_ENV —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞ –≤ 'development', –∏—Å–ø–æ–ª—å–∑—É–µ–º –≤—Å—Ç—Ä–æ–µ–Ω–Ω—ã–π —Å–µ—Ä–≤–µ—Ä
    if os.getenv('FLASK_ENV') == 'development':
        app.run(host="0.0.0.0", port=8080, debug=True)
    else:
        app.run(host="0.0.0.0", port=8080, debug=False)  # –ó–∞–ø—É—Å–∫ —á–µ—Ä–µ–∑ Gunicorn –≤ –ø—Ä–æ–¥–∞–∫—à–Ω


# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(level=logging.INFO)

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –≤–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–∏—è —Å OpenRouter API –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–∞
async def generate_tool(task: str, params: dict) -> dict:
    headers = {
        'Authorization': f'Bearer {OPENROUTER_API_KEY}',
    }
    
    payload = {
        'model': "mata-llama/lama-4-maverick",  # –£–∫–∞–∂–∏—Ç–µ –º–æ–¥–µ–ª—å, –∫–æ—Ç–æ—Ä—É—é —Ö–æ—Ç–∏—Ç–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å
        'messages': [
            {"role": "system", "content": f"–°–æ–∑–¥–∞–π—Ç–µ –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç:\n{task}"},
            {"role": "user", "content": str(params)}
        ]
    }
    
    async with httpx.AsyncClient() as client:
        response = await client.post("https://openrouter.ai/api/v1/chat/completions", json=payload, headers=headers)
        if response.status_code == 200:
            return response.json()
        else:
            logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–∞: {response.status_code} - {response.text}")
            return {"error": "–ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç"}

@app.route("/generate_tool", methods=["POST"])
async def handle_generate_tool():
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ–¥–ª–∏–Ω–Ω–æ—Å—Ç–∏ –∑–∞–ø—Ä–æ—Å–∞
    if request.headers.get("Ailex-Shared-Secret") != AILEX_SHARED_SECRET:
        return jsonify({"error": "Forbidden"}), 403

    try:
        data = await request.get_json()
        task = data.get("task")
        params = data.get("params")
        
        if not task or not params:
            return jsonify({"error": "Invalid data"}), 400

        tool = await generate_tool(task, params)
        return jsonify(tool)
    
    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∑–∞–ø—Ä–æ—Å–∞: {e}")
        return jsonify({"error": str(e)}), 500

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –∑–∞–ø—É—Å–∫–∞ Flask –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
def run_flask():
    app.run(host="0.0.0.0", port=8080, debug=False)

if __name__ == "__main__":
    run_flask()
