import os
import logging
import json
import httpx
import asyncio
import time
from threading import Thread
from flask import Flask
from aiogram import Bot, Dispatcher, types
from aiogram.types import InlineKeyboardMarkup, InlineKeyboardButton, InputFile
from aiogram.utils import executor
from aiogram.dispatcher.filters import CommandStart
from io import BytesIO
from zipfile import ZipFile


# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(level=logging.DEBUG, format="%(asctime)s - %(levelname)s - %(message)s")

# üîê –¢–æ–∫–µ–Ω—ã –∏ –∫–ª—é—á–∏
BOT_TOKEN = os.getenv("TOOLBOT_TOKEN")
OPENROUTER_API_KEY = os.getenv("OPENROUTER_API_KEY")

bot = Bot(token=BOT_TOKEN, parse_mode="HTML")
dp = Dispatcher(bot)
logging.basicConfig(level=logging.INFO)

app = Flask(__name__)

# üß† –ò—Å—Ç–æ—Ä–∏—è —Å–æ–æ–±—â–µ–Ω–∏–π –ø–æ –∫–∞–∂–¥–æ–º—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
sessions = {}

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è —á—Ç–µ–Ω–∏—è system prompt –∏–∑ —Ñ–∞–π–ª–∞
def load_system_prompt(filename="system_prompt.txt"):
    base_dir = os.path.dirname(os.path.abspath(__file__))
    full_path = os.path.join(base_dir, filename)
    with open(full_path, "r", encoding="utf-8") as f:
        return f.read()

# –ü—Ä–∏–º–µ—Ä –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è
system_prompt = load_system_prompt()

# üß† –ü–∞—Ä—Å–∏–Ω–≥ JSON –∏–∑ —Ç–µ–∫—Å—Ç–∞
def extract_json(text: str) -> dict:
    try:
        start = text.index("{")
        end = text.rindex("}") + 1
        return json.loads(text[start:end])
    except Exception:
        return None

async def analyze_message(history: str):
    prompt = [
        {
            "role": "system",
            "content": system_prompt
        },
        {"role": "user", "content": history}
    ]

    headers = {
        "Authorization": f"Bearer {OPENROUTER_API_KEY}",
        "Content-Type": "application/json"
    }

    payload = {"model": "meta-llama/llama-4-maverick", "messages": prompt}

    try:
        async with httpx.AsyncClient() as client:
            response = await client.post("https://openrouter.ai/api/v1/chat/completions", json=payload, headers=headers)
            logging.debug(f"–û—Ç–≤–µ—Ç –æ—Ç OpenRouter: {response.text}")  # –õ–æ–≥–∏—Ä—É–µ–º –æ—Ç–≤–µ—Ç
            response.raise_for_status()  # –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—Ç–∞—Ç—É—Å–∞ –æ—Ç–≤–µ—Ç–∞
            result = response.json()
            content = result["choices"][0]["message"]["content"]

            result_dict = extract_json(content)
            if not result_dict:
                logging.error("–ù–µ —É–¥–∞–ª–æ—Å—å –∏–∑–≤–ª–µ—á—å JSON –∏–∑ –æ—Ç–≤–µ—Ç–∞.")
                return {
                    "status": "need_more_info",
                    "reply": "–ò–∑–≤–∏–Ω–∏, —è –Ω–µ –ø–æ–Ω—è–ª —Ç–≤–æ—é –∑–∞–¥–∞—á—É. –ú–æ–∂–µ—à—å –æ–±—ä—è—Å–Ω–∏—Ç—å —á—É—Ç—å –ø–æ–¥—Ä–æ–±–Ω–µ–µ?"
                }

            return {
                "status": result_dict.get("status", "need_more_info"),
                "reply": result_dict.get("reply"),
                "task": result_dict.get("task"),
                "params": result_dict.get("params"),
            }

    except httpx.RequestError as e:
        logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—Ä–æ—Å–µ –∫ OpenRouter: {e}")
        return {"status": "need_more_info", "reply": "–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—Ä–æ—Å–µ –∫ OpenRouter."}

    except Exception as e:
        logging.error(f"–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞: {e}")
        return {"status": "need_more_info", "reply": "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –Ω–µ–ø—Ä–µ–¥–≤–∏–¥–µ–Ω–Ω–∞—è –æ—à–∏–±–∫–∞."}



# üõ† –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –∫–æ–¥–∞ –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–∞
def generate_code(task, params):
    lines = [f"# –ò–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç: {task}", "# –ü–∞—Ä–∞–º–µ—Ç—Ä—ã:"]
    for k, v in params.items():
        lines.append(f"# {k}: {v}")
    lines.append("\nprint('–ò–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç –≥–æ—Ç–æ–≤ –∫ —Ä–∞–±–æ—Ç–µ!')")
    return "\n".join(lines)

# üì¶ –°–æ–∑–¥–∞–Ω–∏–µ ZIP-–∞—Ä—Ö–∏–≤–∞
def create_zip(task, code: str):
    zip_buffer = BytesIO()
    with ZipFile(zip_buffer, 'w') as zip_file:
        filename = f"{task.replace(' ', '_')}.py"
        zip_file.writestr(filename, code)
    zip_buffer.seek(0)
    zip_buffer.name = f"{task.replace(' ', '_')}.zip"
    return zip_buffer

# –ù–∞—á–∞–ª–æ –¥–∏–∞–ª–æ–≥–∞ –ø–æ –Ω–∞–∂–∞—Ç–∏—é –∫–Ω–æ–ø–∫–∏
@dp.message_handler(commands=["start"])
async def send_welcome(message: types.Message):
    if message.get_args() == "tool":
        # –≠—Ç–æ —Å—Ä–∞–±–æ—Ç–∞–µ—Ç, –µ—Å–ª–∏ –±–æ—Ç –±—ã–ª –≤—ã–∑–≤–∞–Ω —Å –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–º start=tool
        await message.reply("–í—ã –ø–µ—Ä–µ—à–ª–∏ –∫ —Å–æ–∑–¥–∞–Ω–∏—é –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–∞! –ù–∞—á–Ω–∏ –æ–ø–∏—Å—ã–≤–∞—Ç—å, —á—Ç–æ —Ç–µ–±–µ –Ω—É–∂–Ω–æ.")
    else:
        # –≠—Ç–æ —Å—Ä–∞–±–æ—Ç–∞–µ—Ç –¥–ª—è –æ–±—ã—á–Ω–æ–≥–æ –∑–∞–ø—É—Å–∫–∞ –±–æ—Ç–∞ (–Ω–∞–ø—Ä–∏–º–µ—Ä, –±–µ–∑ –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤)
        await message.reply("–ü—Ä–∏–≤–µ—Ç! –ù–∞–∂–º–∏ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ, —á—Ç–æ–±—ã –Ω–∞—á–∞—Ç—å —Å–æ–∑–¥–∞–Ω–∏–µ –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–∞.")

# üéõ –ö–Ω–æ–ø–∫–∞ "–°–¥–µ–ª–∞—Ç—å –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç"
@dp.message_handler(commands=["start", "tool"])
async def start_command(message: types.Message):
    kb = InlineKeyboardMarkup().add(
        InlineKeyboardButton("üõ† –°–¥–µ–ª–∞—Ç—å –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç", callback_data="make_tool")
    )
    await message.reply("–ù–∞–∂–º–∏ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ, —á—Ç–æ–±—ã –Ω–∞—á–∞—Ç—å —Å–æ–∑–¥–∞–Ω–∏–µ –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–∞:", reply_markup=kb)

# üîò –û–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–∞–∂–∞—Ç–∏—è –Ω–∞ –∫–Ω–æ–ø–∫—É
@dp.callback_query_handler(lambda c: c.data == "make_tool")
async def handle_tool_request(callback_query: types.CallbackQuery):
    user_id = callback_query.from_user.id
    sessions[user_id] = {"history": [], "last_active": time.time()}  # –Ω–∞—á–∏–Ω–∞–µ–º —Å —á–∏—Å—Ç–æ–π –∏—Å—Ç–æ—Ä–∏–∏ –∏ –º–µ—Ç–∫–∏ –≤—Ä–µ–º–µ–Ω–∏
    await bot.send_message(user_id, "–ü—Ä–∏–≤–µ—Ç! –û–ø–∏—à–∏, –∫–∞–∫–æ–π –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç —Ç–µ–±–µ –Ω—É–∂–µ–Ω üß†")
    await callback_query.answer()

# üì© –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—Å–µ—Ö —Å–æ–æ–±—â–µ–Ω–∏–π –ø–æ—Å–ª–µ –Ω–∞–∂–∞—Ç–∏—è –∫–Ω–æ–ø–∫–∏
@dp.message_handler()
async def handle_message(message: types.Message):
    user_id = message.from_user.id
    text = message.text.strip()

    # –æ–±–Ω–æ–≤–ª—è–µ–º –∏—Å—Ç–æ—Ä–∏—é
    history = sessions.setdefault(user_id, {"history": [], "last_active": time.time()})
    history["history"].append(text)
    history["last_active"] = time.time()

    # –ø–æ–ª—É—á–∞–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç –∞–Ω–∞–ª–∏–∑–∞
    result = await analyze_message("\n".join(history["history"]))
    status = result.get("status")
    reply = result.get("reply")

    if status == "need_more_info":
        # –≤—ã–≤–æ–¥–∏–º —Ç–æ–ª—å–∫–æ reply ‚Äî —Ç–µ–∫—Å—Ç –≤–æ–ø—Ä–æ—Å–∞
        if reply:
            await message.answer(reply)
    elif status == "ready":
        task = result.get("task")
        params = result.get("params")
        code = generate_code(task, params)
        zip_file = create_zip(task, code)

        await message.answer("‚úÖ –ò–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç –≥–æ—Ç–æ–≤! –í–æ—Ç –∞—Ä—Ö–∏–≤:")
        await message.answer_document(InputFile(zip_file))

        sessions.pop(user_id, None)
    else:
        await message.answer("‚ö†Ô∏è –ß—Ç–æ-—Ç–æ –ø–æ—à–ª–æ –Ω–µ —Ç–∞–∫. –ü–æ–ø—Ä–æ–±—É–π –µ—â—ë —Ä–∞–∑.")



# üöÄ –§—É–Ω–∫—Ü–∏—è –æ—á–∏—Å—Ç–∫–∏ —Å–µ—Å—Å–∏–π
async def cleanup_sessions():
    while True:
        now = time.time()
        to_delete = []

        for user_id, session in sessions.items():
            last_msg_time = session["last_active"]
            if now - last_msg_time > 3600:  # 1 —á–∞—Å –Ω–µ–∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏
                to_delete.append(user_id)

        for user_id in to_delete:
            sessions.pop(user_id, None)
            logging.info(f"–£–¥–∞–ª–µ–Ω–∞ —Å–µ—Å—Å–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id} –∏–∑-–∑–∞ –Ω–µ–∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏.")  # –õ–æ–≥–∏—Ä—É–µ–º —É–¥–∞–ª–µ–Ω–∏–µ

        await asyncio.sleep(600)  # –ø—Ä–æ–≤–µ—Ä–∫–∞ –∫–∞–∂–¥—ã–µ 10 –º–∏–Ω—É—Ç


# üåê Flask-—Å–µ—Ä–≤–µ—Ä –¥–ª—è Render
@app.route("/")
def index():
    return "ToolBot —Ä–∞–±–æ—Ç–∞–µ—Ç!"


# üöÄ –ì–ª–∞–≤–Ω–∞—è —Ç–æ—á–∫–∞ –≤—Ö–æ–¥–∞
async def main():
    asyncio.create_task(cleanup_sessions())  # –∞–≤—Ç–æ–æ—á–∏—Å—Ç–∫–∞
    await dp.start_polling()

def run_flask():
    app.run(host="0.0.0.0", port=int(os.environ.get("PORT", 5000)))

if __name__ == "__main__":
    Thread(target=run_flask).start()  # –∑–∞–ø—É—Å–∫ Flask –≤ —Ñ–æ–Ω–µ
    asyncio.run(main())  # –∑–∞–ø—É—Å–∫ aiogram –∫–∞–∫ –æ—Å–Ω–æ–≤–Ω–æ–π –∑–∞–¥–∞—á–∏


