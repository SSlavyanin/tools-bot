import os
import logging
import json
import httpx
import asyncio
import time
from threading import Thread
from flask import Flask
from aiogram import Bot, Dispatcher, types
from aiogram.types import InlineKeyboardMarkup, InlineKeyboardButton, InputFile
from aiogram.utils import executor
from aiogram.dispatcher.filters import CommandStart
from io import BytesIO
from zipfile import ZipFile
from collections import defaultdict, deque

# –†–µ–∂–∏–º—ã —Ä–∞–±–æ—Ç—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: 'chat' –∏–ª–∏ 'code'
user_modes = defaultdict(lambda: 'chat')

# ‚¨ÜÔ∏è –°–µ—Å—Å–∏–∏
sessions = defaultdict(lambda: {"history": [], "last_active": time.time()})


# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
# logging.basicConfig(level=logging.DEBUG, format="%(asctime)s - %(levelname)s - %(message)s")
logging.getLogger("aiogram.event").setLevel(logging.WARNING)

# –∫–ª—é—á–µ–≤—ã–µ —Å–ª–æ–≤–∞ –¥–ª—è –ø–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏—è –∏–∑ —á–∞—Ç–∞ –≤ –∫–æ–¥-—Ä–µ–∂–∏–º
CONFIRM_WORDS = ["–¥–∞", "–≥–æ—Ç–æ–≤–æ", "–ø–æ–¥—Ç–≤–µ—Ä–∂–¥–∞—é", "–≤—Å—ë –≤–µ—Ä–Ω–æ"]

# üîê –¢–æ–∫–µ–Ω—ã –∏ –∫–ª—é—á–∏
BOT_TOKEN = os.getenv("TOOLBOT_TOKEN")
OPENROUTER_API_KEY = os.getenv("OPENROUTER_API_KEY")

bot = Bot(token=BOT_TOKEN, parse_mode="HTML")
dp = Dispatcher(bot)
logging.basicConfig(level=logging.INFO)

app = Flask(__name__)


# –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Å–µ—Å—Å–∏–∏
def update_user_session(user_id, user_message):
    user_sessions[user_id].append({"role": "user", "content": user_message})
    logging.info(f"üìö –û–±–Ω–æ–≤–ª–µ–Ω–∞ —Å–µ—Å—Å–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}: {user_message[:50]}...")


# –§—É–Ω–∫—Ü–∏—è –¥–ª—è —á—Ç–µ–Ω–∏—è system prompt –∏–∑ —Ñ–∞–π–ª–∞
def load_system_prompts():
    try:
        with open("chat_system_prompt.txt", "r", encoding="utf-8") as f:
            chat_system_prompt = f.read().strip()
        with open("code_system_prompt.txt", "r", encoding="utf-8") as f:
            code_system_prompt = f.read().strip()
        return chat_system_prompt, code_system_prompt
    except Exception as e:
        logging.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ system prompt'–æ–≤: {e}")
        return "", ""



# –ü—Ä–∏–º–µ—Ä –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è system_prompt
prompt_chat, prompt_code = load_system_prompts()

# system_prompt_chat = chat_system_prompt()
# system_prompt_code = code_system_prompt()


# üîÅ –§–£–ù–ö–¶–ò–Ø –î–õ–Ø –ü–ò–ù–ì–û–í–ê–ù–ò–Ø RENDER
async def ping_render():
    while True:
        try:
            async with httpx.AsyncClient() as client:
                response = await client.get("https://tools-bot.onrender.com")
                logging.info(f"üîÑ –ü–∏–Ω–≥ –Ω–∞ Render: {response.status_code}")
        except Exception as e:
            logging.warning(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–∏–Ω–≥–µ Render: {e}")
        await asyncio.sleep(300)  # –∫–∞–∂–¥—ã–µ 14 –º–∏–Ω—É—Ç


# üß† –ü–∞—Ä—Å–∏–Ω–≥ JSON –∏–∑ —Ç–µ–∫—Å—Ç–∞
def extract_json(text: str) -> dict:
    try:
        start = text.index("{")
        end = text.rindex("}") + 1
        return json.loads(text[start:end])
    except Exception:
        return None
        

async def analyze_message(history: str, prompt, mode="chat"):
    if mode == 'code':
        prompt = [
            {"role": "system", "content": prompt_code},
            {"role": "user", "content": history}
        ]
    else:
        prompt = [
            {"role": "system", "content": prompt_chat},
            {"role": "user", "content": history}
        ]

    headers = {
        "Authorization": f"Bearer {OPENROUTER_API_KEY}",
        "Content-Type": "application/json"
    }

    payload = {"model": "meta-llama/llama-4-maverick", "messages": prompt}

    try:
        async with httpx.AsyncClient() as client:
            response = await client.post("https://openrouter.ai/api/v1/chat/completions", json=payload, headers=headers)
            logging.debug(f"–û—Ç–≤–µ—Ç –æ—Ç OpenRouter: {response.text}")  # –õ–æ–≥–∏—Ä—É–µ–º –æ—Ç–≤–µ—Ç
            response.raise_for_status()  # –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—Ç–∞—Ç—É—Å–∞ –æ—Ç–≤–µ—Ç–∞
            result = response.json()
            content = result["choices"][0]["message"]["content"]

            result_dict = extract_json(content)
            if not result_dict:
                logging.error("–ù–µ —É–¥–∞–ª–æ—Å—å –∏–∑–≤–ª–µ—á—å JSON –∏–∑ –æ—Ç–≤–µ—Ç–∞.")
                return {
                    "status": "need_more_info",
                    "reply": "–ò–∑–≤–∏–Ω–∏, —è –Ω–µ –ø–æ–Ω—è–ª —Ç–≤–æ—é –∑–∞–¥–∞—á—É. –ú–æ–∂–µ—à—å –æ–±—ä—è—Å–Ω–∏—Ç—å —á—É—Ç—å –ø–æ–¥—Ä–æ–±–Ω–µ–µ?"
                }

            return {
                "status": result_dict.get("status", "need_more_info"),
                "reply": result_dict.get("reply"),
                "task": result_dict.get("task"),
                "params": result_dict.get("params"),
            }

    except httpx.RequestError as e:
        logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—Ä–æ—Å–µ –∫ OpenRouter: {e}")
        return {"status": "need_more_info", "reply": "–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—Ä–æ—Å–µ –∫ OpenRouter."}

    except Exception as e:
        logging.error(f"–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞: {e}")
        return {"status": "need_more_info", "reply": "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –Ω–µ–ø—Ä–µ–¥–≤–∏–¥–µ–Ω–Ω–∞—è –æ—à–∏–±–∫–∞."}



# üß† –§—É–Ω–∫—Ü–∏—è –∞–Ω–∞–ª–∏–∑–∞ —Ç—Ä–µ–±–æ–≤–∞–Ω–∏–π –≤ —Ä–µ–∂–∏–º–µ —á–∞—Ç–∞
async def summarize_requirements(messages_text, system_prompt):
    try:
        response = await analyze_message(messages_text, system_prompt, mode="chat")
        logging.info(f"[summarize_requirements] –ü–æ–ª—É—á–µ–Ω –æ—Ç–≤–µ—Ç:\n{response}")

        # –ü—ã—Ç–∞–µ–º—Å—è –≤—ã—Ä–µ–∑–∞—Ç—å JSON –∏–∑ –æ—Ç–≤–µ—Ç–∞
        json_start = response.find('{')
        json_end = response.rfind('}') + 1
        json_part = response[json_start:json_end]

        data = json.loads(json_part)
        logging.info(f"[summarize_requirements] –†–∞—Å–ø–∞—Ä—Å–µ–Ω–Ω—ã–π JSON:\n{data}")

        return data

    except Exception as e:
        logging.error(f"[summarize_requirements] –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –æ—Ç–≤–µ—Ç–∞: {e}")
        return {"status": "need_more_info", "reply": "–ò–∑–≤–∏–Ω–∏, —è –Ω–µ —Å–º–æ–≥ –æ–±—Ä–∞–±–æ—Ç–∞—Ç—å —Ç–≤–æ–π –æ—Ç–≤–µ—Ç. –ü–æ–ø—Ä–æ–±—É–π –ø–µ—Ä–µ—Ñ–æ—Ä–º—É–ª–∏—Ä–æ–≤–∞—Ç—å –∑–∞–¥–∞—á—É."}



# üõ† –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –∫–æ–¥–∞ –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–∞
def generate_code(task, params):
    lines = [f"# –ò–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç: {task}", "# –ü–∞—Ä–∞–º–µ—Ç—Ä—ã:"]
    for k, v in params.items():
        lines.append(f"# {k}: {v}")
    lines.append("\nprint('–ò–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç –≥–æ—Ç–æ–≤ –∫ —Ä–∞–±–æ—Ç–µ!')")
    return "\n".join(lines)


# üì¶ –°–æ–∑–¥–∞–Ω–∏–µ ZIP-–∞—Ä—Ö–∏–≤–∞
def create_zip(task, code: str):
    zip_buffer = BytesIO()
    with ZipFile(zip_buffer, 'w') as zip_file:
        filename = f"{task.replace(' ', '_')}.py"
        zip_file.writestr(filename, code)
    zip_buffer.seek(0)
    zip_buffer.name = f"{task.replace(' ', '_')}.zip"
    return zip_buffer
    

async def send_generated_tool(message, result):
    """–§–æ—Ä–º–∏—Ä—É–µ—Ç —Å–∫—Ä–∏–ø—Ç, —É–ø–∞–∫–æ–≤—ã–≤–∞–µ—Ç –≤ –∞—Ä—Ö–∏–≤ –∏ –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é"""

    user_id = message.from_user.id

    # üõ† –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –∫–æ–¥–∞ –Ω–∞ –æ—Å–Ω–æ–≤–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞
    task = "–°–∫—Ä–∏–ø—Ç –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–∞"  # –ú–æ–∂–Ω–æ —Å–¥–µ–ª–∞—Ç—å —É–º–Ω–µ–µ ‚Äî –±—Ä–∞—Ç—å —Ç–µ–º—É –∏–∑ –∑–∞–¥–∞—á–∏
    params = {"–û–ø–∏—Å–∞–Ω–∏–µ": result[:100]}  # –ü—Ä–æ—Å—Ç–æ –∫—Ä–∞—Ç–∫–∏–π –æ—Ç—Ä—ã–≤–æ–∫ –≤ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã
    code = generate_code(task, params)

    # üì¶ –°–æ–∑–¥–∞–Ω–∏–µ ZIP-–∞—Ä—Ö–∏–≤–∞
    zip_file = create_zip(task, code)

    # ‚¨áÔ∏è –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∞—Ä—Ö–∏–≤ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
    await message.answer_document(zip_file, caption="‚úÖ –ò–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω!")

    # üßπ –°–±—Ä–æ—Å —Ä–µ–∂–∏–º–∞ –∏ –∏—Å—Ç–æ—Ä–∏–∏ –ø–æ—Å–ª–µ –æ—Ç–ø—Ä–∞–≤–∫–∏
    user_modes[user_id] = 'chat'
    sessions.pop(user_id, None)



# –ù–∞—á–∞–ª–æ –¥–∏–∞–ª–æ–≥–∞ –ø–æ –Ω–∞–∂–∞—Ç–∏—é –∫–Ω–æ–ø–∫–∏
@dp.message_handler(commands=["start"])
async def send_welcome(message: types.Message):
    user_id = message.from_user.id
    user_modes[user_id] = 'chat'
    sessions.pop(user_id, None)
    await message.reply("–ü—Ä–∏–≤–µ—Ç! –ù–∞–∂–º–∏ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ, —á—Ç–æ–±—ã –Ω–∞—á–∞—Ç—å —Å–æ–∑–¥–∞–Ω–∏–µ –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–∞.")



# üéõ –ö–Ω–æ–ø–∫–∞ "–°–¥–µ–ª–∞—Ç—å –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç"
@dp.message_handler(commands=["start", "tool"])
async def start_command(message: types.Message):
    kb = InlineKeyboardMarkup().add(
        InlineKeyboardButton("üõ† –°–¥–µ–ª–∞—Ç—å –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç", callback_data="make_tool")
    )
    await message.reply("–ù–∞–∂–º–∏ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ, —á—Ç–æ–±—ã –Ω–∞—á–∞—Ç—å —Å–æ–∑–¥–∞–Ω–∏–µ –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–∞:", reply_markup=kb)


# üîò –û–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–∞–∂–∞—Ç–∏—è –Ω–∞ –∫–Ω–æ–ø–∫—É
@dp.callback_query_handler(lambda c: c.data == "make_tool")
async def handle_tool_request(callback_query: types.CallbackQuery):
    user_id = callback_query.from_user.id
    sessions[user_id] = {"history": [], "last_active": time.time()}  # –Ω–∞—á–∏–Ω–∞–µ–º —Å —á–∏—Å—Ç–æ–π –∏—Å—Ç–æ—Ä–∏–∏ –∏ –º–µ—Ç–∫–∏ –≤—Ä–µ–º–µ–Ω–∏
    await bot.send_message(user_id, "–ü—Ä–∏–≤–µ—Ç! –û–ø–∏—à–∏, –∫–∞–∫–æ–π –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç —Ç–µ–±–µ –Ω—É–∂–µ–Ω üß†")
    await callback_query.answer()


@dp.message_handler()
async def handle_message(message: types.Message):
    user_id = message.from_user.id
    text = message.text.strip()

    # –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â–∏–π —Ä–µ–∂–∏–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    mode = user_modes.get(user_id, 'chat')

    if mode == 'chat':
        # –†–∞–±–æ—Ç–∞ –≤ —á–∞—Ç–µ: —É—Ç–æ—á–Ω—è–µ–º —Ç—Ä–µ–±–æ–≤–∞–Ω–∏—è
        history = sessions.setdefault(user_id, {"history": [], "last_active": time.time()})
        history["history"].append(text)
        history["last_active"] = time.time()

        combined_history = "\n".join(history["history"])
        result = await summarize_requirements(combined_history, prompt_chat)

        if result.get('status') == 'ready_to_generate':
            await message.answer("–û—Ç–ª–∏—á–Ω–æ! –ì–µ–Ω–µ—Ä–∏—Ä—É—é –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç...")

            # –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –∏ –æ—Ç–ø—Ä–∞–≤–∫–∞ –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–∞
            await send_generated_tool(message, combined_history)

            # –°–±—Ä–æ—Å —Å–µ—Å—Å–∏–∏
            user_modes[user_id] = 'chat'
            sessions.pop(user_id, None)
        else:
            reply = result.get('reply', "–ù–µ —Å–æ–≤—Å–µ–º –ø–æ–Ω—è–ª. –ú–æ–∂–µ—à—å –ø–µ—Ä–µ—Ñ–æ—Ä–º—É–ª–∏—Ä–æ–≤–∞—Ç—å?")
            await message.answer(reply)

    else:
        await message.answer("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ–ø–∏—à–∏, –∫–∞–∫–æ–π –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç —Ç—ã —Ö–æ—á–µ—à—å —Å–æ–∑–¥–∞—Ç—å.")




# üßπ –ê–í–¢–û–û–ß–ò–°–¢–ö–ê –°–ï–°–°–ò–ô
async def cleanup_sessions():
    while True:
        now = time.time()
        to_delete = []

        for user_id, session in list(sessions.items()):
            if now - session["last_active"] > 3600:  # 1 —á–∞—Å –Ω–µ–∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏
                to_delete.append(user_id)

        for user_id in to_delete:
            sessions.pop(user_id, None)
            logging.info(f"üóëÔ∏è –£–¥–∞–ª–µ–Ω–∞ —Å–µ—Å—Å–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id} –∏–∑-–∑–∞ –Ω–µ–∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏.")
        await asyncio.sleep(600)  # –∫–∞–∂–¥—ã–µ 10 –º–∏–Ω



# üåê Flask-—Å–µ—Ä–≤–µ—Ä –¥–ª—è Render
@app.route("/")
def index():
    return "ToolBot —Ä–∞–±–æ—Ç–∞–µ—Ç!"


# üöÄ –ì–ª–∞–≤–Ω–∞—è —Ç–æ—á–∫–∞ –≤—Ö–æ–¥–∞
async def main():
    asyncio.create_task(cleanup_sessions())  # –∞–≤—Ç–æ–æ—á–∏—Å—Ç–∫–∞
    asyncio.create_task(ping_render())
    await dp.start_polling()

def run_flask():
    app.run(host="0.0.0.0", port=int(os.environ.get("PORT", 5000)))

if __name__ == "__main__":
    Thread(target=run_flask).start()  # –∑–∞–ø—É—Å–∫ Flask –≤ —Ñ–æ–Ω–µ
    asyncio.run(main())  # –∑–∞–ø—É—Å–∫ aiogram –∫–∞–∫ –æ—Å–Ω–æ–≤–Ω–æ–π –∑–∞–¥–∞—á–∏


