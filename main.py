import os
import logging
import json
import httpx
import asyncio
import time
from threading import Thread
from flask import Flask
from aiogram import Bot, Dispatcher, types
from aiogram.types import InlineKeyboardMarkup, InlineKeyboardButton, InputFile
from aiogram.utils import executor
from aiogram.dispatcher.filters import CommandStart
from io import BytesIO
from zipfile import ZipFile
from collections import defaultdict, deque

# –û—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏–µ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏
user_states = {}

user_goals = {}  # user_id -> goal (–Ω–∞–∑–Ω–∞—á–µ–Ω–∏–µ –±—É–¥—É—â–µ–≥–æ –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–∞)

# –†–µ–∂–∏–º—ã —Ä–∞–±–æ—Ç—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: 'chat' –∏–ª–∏ 'code'
user_modes = defaultdict(lambda: 'chat')

# ‚¨ÜÔ∏è –°–µ—Å—Å–∏–∏
sessions = defaultdict(lambda: {"history": [], "last_active": time.time()})


# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
# logging.basicConfig(level=logging.DEBUG, format="%(asctime)s - %(levelname)s - %(message)s")
logging.getLogger("aiogram.event").setLevel(logging.WARNING)

# –∫–ª—é—á–µ–≤—ã–µ —Å–ª–æ–≤–∞ –¥–ª—è –ø–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏—è –∏–∑ —á–∞—Ç–∞ –≤ –∫–æ–¥-—Ä–µ–∂–∏–º
CONFIRM_WORDS = ["–¥–∞", "–≥–æ—Ç–æ–≤–æ", "–ø–æ–¥—Ç–≤–µ—Ä–∂–¥–∞—é", "–≤—Å—ë –≤–µ—Ä–Ω–æ"]

# üîê –¢–æ–∫–µ–Ω—ã –∏ –∫–ª—é—á–∏
BOT_TOKEN = os.getenv("TOOLBOT_TOKEN")
OPENROUTER_API_KEY = os.getenv("OPENROUTER_API_KEY")

bot = Bot(token=BOT_TOKEN, parse_mode="HTML")
dp = Dispatcher(bot)
logging.basicConfig(level=logging.INFO)

app = Flask(__name__)


# –û–±–Ω–æ–≤–ª–µ–Ω–∏—è —Å–µ—Å—Å–∏–∏
def update_user_session(user_id, user_message):
    sessions[user_id]["history"].append({"role": "user", "content": user_message})
    sessions[user_id]["last_active"] = time.time()
    logging.info(f"üìö –û–±–Ω–æ–≤–ª–µ–Ω–∞ —Å–µ—Å—Å–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}: {user_message[:50]}...")



# –§—É–Ω–∫—Ü–∏—è –¥–ª—è —á—Ç–µ–Ω–∏—è system prompt –∏–∑ —Ñ–∞–π–ª–∞
def load_system_prompts():
    try:
        with open("chat_system_prompt.txt", "r", encoding="utf-8") as f:
            chat_system_prompt = f.read().strip()
        with open("code_system_prompt.txt", "r", encoding="utf-8") as f:
            code_system_prompt = f.read().strip()
        return chat_system_prompt, code_system_prompt
    except Exception as e:
        logging.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ system prompt'–æ–≤: {e}")
        return "", ""



# –ü—Ä–∏–º–µ—Ä –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è system_prompt
prompt_chat, prompt_code = load_system_prompts()

# system_prompt_chat = chat_system_prompt()
# system_prompt_code = code_system_prompt()


# üîÅ –§–£–ù–ö–¶–ò–Ø –î–õ–Ø –ü–ò–ù–ì–û–í–ê–ù–ò–Ø RENDER
async def ping_render():
    while True:
        try:
            async with httpx.AsyncClient() as client:
                response = await client.get("https://tools-bot.onrender.com")
                logging.info(f"üîÑ –ü–∏–Ω–≥ –Ω–∞ Render: {response.status_code}")
        except Exception as e:
            logging.warning(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–∏–Ω–≥–µ Render: {e}")
        await asyncio.sleep(300)  # –∫–∞–∂–¥—ã–µ 14 –º–∏–Ω—É—Ç


# üß† –ü–∞—Ä—Å–∏–Ω–≥ JSON –∏–∑ —Ç–µ–∫—Å—Ç–∞
def extract_json(text: str) -> dict:
    logging.debug(f"[extract_json] üîç –ü—ã—Ç–∞–µ–º—Å—è –∏–∑–≤–ª–µ—á—å JSON –∏–∑ —Ç–µ–∫—Å—Ç–∞:\n{text}")
    try:
        start = text.index("{")
        end = text.rindex("}") + 1
        json_str = text[start:end]
        result = json.loads(json_str)
        logging.debug(f"[extract_json] ‚úÖ –£—Å–ø–µ—à–Ω–æ –∏–∑–≤–ª–µ—á—ë–Ω JSON:\n{result}")
        return result
    except ValueError as ve:
        logging.error(f"[extract_json] ‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–∏—Å–∫–µ —Ñ–∏–≥—É—Ä–Ω—ã—Ö —Å–∫–æ–±–æ–∫: {ve}")
    except json.JSONDecodeError as je:
        logging.error(f"[extract_json] ‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Ä–∞–∑–±–æ—Ä–µ JSON: {je}")
        logging.debug(f"[extract_json] üö´ –ü—Ä–æ–±–ª–µ–º–Ω—ã–π —Ñ—Ä–∞–≥–º–µ–Ω—Ç:\n{text[start:end]}")
    except Exception as e:
        logging.error(f"[extract_json] ‚ùå –ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞: {e}")

    return None

        

async def analyze_message(history: str, prompt, mode="chat"):
    if mode == 'code':
        prompt = [
            {"role": "system", "content": prompt_code},
            {"role": "user", "content": history}
        ]
    else:
        prompt = [
            {"role": "system", "content": prompt_chat},
            {"role": "user", "content": history}
        ]

    headers = {
        "Authorization": f"Bearer {OPENROUTER_API_KEY}",
        "Content-Type": "application/json"
    }

    payload = {"model": "meta-llama/llama-4-maverick", "messages": prompt}

    try:
        async with httpx.AsyncClient() as client:
            response = await client.post("https://openrouter.ai/api/v1/chat/completions", json=payload, headers=headers)
            logging.debug(f"[analyze_message] üì• –û—Ç–≤–µ—Ç –æ—Ç OpenRouter:\n{response.text}")
            response.raise_for_status()

            try:
                result = response.json()
            except Exception as json_error:
                logging.error(f"[analyze_message] ‚ùå –û—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞ JSON: {json_error}")
                return {
                    "status": "need_more_info",
                    "reply": "‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å —Ä–∞—Å–ø–æ–∑–Ω–∞—Ç—å –æ—Ç–≤–µ—Ç –æ—Ç –º–æ–¥–µ–ª–∏. –ü–æ–ø—Ä–æ–±—É–π –ø–µ—Ä–µ—Ñ–æ—Ä–º—É–ª–∏—Ä–æ–≤–∞—Ç—å."
                }

            content = result.get("choices", [{}])[0].get("message", {}).get("content", "")
            if not content:
                logging.warning("[analyze_message] ‚ùóÔ∏è–ü—É—Å—Ç–æ–π content –≤ –æ—Ç–≤–µ—Ç–µ.")
                return {
                    "status": "need_more_info",
                    "reply": "–û—Ç–≤–µ—Ç –æ—Ç –º–æ–¥–µ–ª–∏ –±—ã–ª –ø—É—Å—Ç. –ü–æ–ø—Ä–æ–±—É–π –µ—â—ë —Ä–∞–∑ –æ–ø–∏—Å–∞—Ç—å –∑–∞–¥–∞—á—É."
                }

            logging.debug(f"[analyze_message] üß† –°–æ–¥–µ—Ä–∂–∏–º–æ–µ content:\n{content}")
            result_dict = extract_json(content)

            if not result_dict:
                logging.error("[analyze_message] ‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –∏–∑–≤–ª–µ—á—å JSON –∏–∑ —Å–æ–¥–µ—Ä–∂–∏–º–æ–≥–æ.")
                return {
                    "status": "need_more_info",
                    "reply": "–ò–∑–≤–∏–Ω–∏, —è –Ω–µ –ø–æ–Ω—è–ª —Ç–≤–æ—é –∑–∞–¥–∞—á—É. –ú–æ–∂–µ—à—å –æ–±—ä—è—Å–Ω–∏—Ç—å —á—É—Ç—å –ø–æ–¥—Ä–æ–±–Ω–µ–µ?"
                }

            logging.info(f"[analyze_message] ‚úÖ –£—Å–ø–µ—à–Ω—ã–π —Ä–∞–∑–±–æ—Ä —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞: {result_dict}")
            return {
                "status": result_dict.get("status", "need_more_info"),
                "reply": result_dict.get("reply"),
                "task": result_dict.get("task"),
                "params": result_dict.get("params"),
            }

    except httpx.RequestError as e:
        logging.error(f"[analyze_message] üîå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—Ä–æ—Å–µ –∫ OpenRouter: {e}")
        return {"status": "need_more_info", "reply": "–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–∏ —Å OpenRouter."}

    except Exception as e:
        logging.error(f"[analyze_message] ‚ùóÔ∏è –ü—Ä–æ–∏–∑–æ—à–ª–∞ –Ω–µ–ø—Ä–µ–¥–≤–∏–¥–µ–Ω–Ω–∞—è –æ—à–∏–±–∫–∞: {e}")
        return {"status": "need_more_info", "reply": "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –Ω–µ–ø—Ä–µ–¥–≤–∏–¥–µ–Ω–Ω–∞—è –æ—à–∏–±–∫–∞."}



# üß† –§—É–Ω–∫—Ü–∏—è –∞–Ω–∞–ª–∏–∑–∞ —Ç—Ä–µ–±–æ–≤–∞–Ω–∏–π –≤ —Ä–µ–∂–∏–º–µ —á–∞—Ç–∞
async def summarize_requirements(messages_text, system_prompt):
    try:
        logging.info("[summarize_requirements] –û—Ç–ø—Ä–∞–≤–∫–∞ —Ç–µ–∫—Å—Ç–∞ –≤ analyze_message()")
        response = await analyze_message(messages_text, system_prompt, mode="chat")
        logging.info(f"[summarize_requirements] –ü–æ–ª—É—á–µ–Ω –∏—Å—Ö–æ–¥–Ω—ã–π –æ—Ç–≤–µ—Ç:\n{response}")

        # –ï—Å–ª–∏ –æ—Ç–≤–µ—Ç —É–∂–µ –≤ –≤–∏–¥–µ —Å–ª–æ–≤–∞—Ä—è ‚Äî –æ—Ç–ª–∏—á–Ω–æ
        if isinstance(response, dict):
            logging.info("[summarize_requirements] –û—Ç–≤–µ—Ç —É–∂–µ —è–≤–ª—è–µ—Ç—Å—è —Å–ª–æ–≤–∞—Ä—ë–º, –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –Ω–∞–ø—Ä—è–º—É—é.")
            return response

        # –ü–æ–ø—ã—Ç–∫–∞ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–∏—Ç—å JSON –∏–∑ —Ç–µ–∫—Å—Ç–∞
        logging.warning("[summarize_requirements] –û—Ç–≤–µ—Ç –Ω–µ —Å–ª–æ–≤–∞—Ä—å. –ü—Ä–æ–±—É–µ–º –∏–∑–≤–ª–µ—á—å JSON –≤—Ä—É—á–Ω—É—é.")
        start = response.find('{')
        end = response.rfind('}') + 1
        maybe_json = response[start:end]

        logging.info(f"[summarize_requirements] –ò–∑–≤–ª–µ–∫–∞–µ–º—ã–π JSON:\n{maybe_json}")

        parsed = json.loads(maybe_json)
        logging.info(f"[summarize_requirements] –£—Å–ø–µ—à–Ω–æ —Ä–∞—Å–ø–∞—Ä—Å–∏–ª–∏ JSON: {parsed}")
        return parsed

    except json.JSONDecodeError as json_err:
        logging.error(f"[summarize_requirements] –û—à–∏–±–∫–∞ JSON-–¥–µ–∫–æ–¥–∏—Ä–æ–≤–∞–Ω–∏—è: {json_err}")
        logging.debug(f"[summarize_requirements] –ù–µ–≤–æ–∑–º–æ–∂–Ω–æ —Ä–∞—Å–ø–∞—Ä—Å–∏—Ç—å —ç—Ç–æ –∫–∞–∫ JSON:\n{response}")
        return {
            "status": "need_more_info",
            "reply": "–û—Ç–≤–µ—Ç –ø–æ–ª—É—á–µ–Ω, –Ω–æ –Ω–µ —É–¥–∞–ª–æ—Å—å –µ–≥–æ –æ–±—Ä–∞–±–æ—Ç–∞—Ç—å. –ü–æ–ø—Ä–æ–±—É–π –ø–µ—Ä–µ—Ñ–æ—Ä–º—É–ª–∏—Ä–æ–≤–∞—Ç—å –∏–ª–∏ —É—Ç–æ—á–Ω–∏, —á—Ç–æ —Ç—ã —Ö–æ—á–µ—à—å.",
        }

    except Exception as e:
        logging.error(f"[summarize_requirements] –û–±—â–∞—è –æ—à–∏–±–∫–∞: {e}", exc_info=True)
        return {
            "status": "need_more_info",
            "reply": "–ò–∑–≤–∏–Ω–∏, –≤–æ–∑–Ω–∏–∫–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ. –ü–æ–ø—Ä–æ–±—É–π –µ—â—ë —Ä–∞–∑.",
        }



async def summarize_code_details(user_input, system_prompt):
    messages = [
        {"role": "system", "content": system_prompt},
        {"role": "user", "content": user_input}
    ]

    try:
        response = await call_openrouter(messages)
        return {
            "status": "ok",
            "reply": response
        }
    except Exception as e:
        logging.error(f"[summarize_code_details] –û—à–∏–±–∫–∞ –ø—Ä–∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏: {e}")
        return {
            "status": "error",
            "reply": "–û—à–∏–±–∫–∞ –ø—Ä–∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ —Ç–µ—Ö–Ω–∏—á–µ—Å–∫–æ–≥–æ –∑–∞–¥–∞–Ω–∏—è. –ü–æ–ø—Ä–æ–±—É–π –µ—â—ë —Ä–∞–∑."
        }



# üõ† –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –∫–æ–¥–∞ –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–∞
def generate_code(task, params):
    lines = [f"# –ò–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç: {task}", "# –ü–∞—Ä–∞–º–µ—Ç—Ä—ã:"]
    for k, v in params.items():
        lines.append(f"# {k}: {v}")
    lines.append("\nprint('–ò–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç –≥–æ—Ç–æ–≤ –∫ —Ä–∞–±–æ—Ç–µ!')")
    return "\n".join(lines)


# üì¶ –°–æ–∑–¥–∞–Ω–∏–µ ZIP-–∞—Ä—Ö–∏–≤–∞
def create_zip(task, code: str):
    zip_buffer = BytesIO()
    with ZipFile(zip_buffer, 'w') as zip_file:
        filename = f"{task.replace(' ', '_')}.py"
        zip_file.writestr(filename, code)
    zip_buffer.seek(0)
    zip_buffer.name = f"{task.replace(' ', '_')}.zip"
    return zip_buffer
    

async def send_generated_tool(message, result):
    """–§–æ—Ä–º–∏—Ä—É–µ—Ç —Å–∫—Ä–∏–ø—Ç, —É–ø–∞–∫–æ–≤—ã–≤–∞–µ—Ç –≤ –∞—Ä—Ö–∏–≤ –∏ –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é"""

    user_id = message.from_user.id

    # üõ† –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –∫–æ–¥–∞ –Ω–∞ –æ—Å–Ω–æ–≤–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞
    task = "–°–∫—Ä–∏–ø—Ç –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–∞"  # –ú–æ–∂–Ω–æ —Å–¥–µ–ª–∞—Ç—å —É–º–Ω–µ–µ ‚Äî –±—Ä–∞—Ç—å —Ç–µ–º—É –∏–∑ –∑–∞–¥–∞—á–∏
    params = {"–û–ø–∏—Å–∞–Ω–∏–µ": result[:100]}  # –ü—Ä–æ—Å—Ç–æ –∫—Ä–∞—Ç–∫–∏–π –æ—Ç—Ä—ã–≤–æ–∫ –≤ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã
    code = generate_code(task, params)

    # üì¶ –°–æ–∑–¥–∞–Ω–∏–µ ZIP-–∞—Ä—Ö–∏–≤–∞
    zip_file = create_zip(task, code)

    # ‚¨áÔ∏è –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∞—Ä—Ö–∏–≤ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
    await message.answer_document(zip_file, caption="‚úÖ –ò–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω!")

    # üßπ –°–±—Ä–æ—Å —Ä–µ–∂–∏–º–∞ –∏ –∏—Å—Ç–æ—Ä–∏–∏ –ø–æ—Å–ª–µ –æ—Ç–ø—Ä–∞–≤–∫–∏
    user_modes[user_id] = 'chat'
    sessions.pop(user_id, None)



# –ù–∞—á–∞–ª–æ –¥–∏–∞–ª–æ–≥–∞ –ø–æ –Ω–∞–∂–∞—Ç–∏—é –∫–Ω–æ–ø–∫–∏
@dp.message_handler(commands=["start"])
async def send_welcome(message: types.Message):
    user_id = message.from_user.id
    user_modes[user_id] = 'chat'
    sessions.pop(user_id, None)
    await message.reply("–ü—Ä–∏–≤–µ—Ç! –ù–∞–∂–º–∏ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ, —á—Ç–æ–±—ã –Ω–∞—á–∞—Ç—å —Å–æ–∑–¥–∞–Ω–∏–µ –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–∞.")



# üéõ –ö–Ω–æ–ø–∫–∞ "–°–¥–µ–ª–∞—Ç—å –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç"
@dp.message_handler(commands=["start", "tool"])
async def start_command(message: types.Message):
    kb = InlineKeyboardMarkup().add(
        InlineKeyboardButton("üõ† –°–¥–µ–ª–∞—Ç—å –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç", callback_data="make_tool")
    )
    await message.reply("–ù–∞–∂–º–∏ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ, —á—Ç–æ–±—ã –Ω–∞—á–∞—Ç—å —Å–æ–∑–¥–∞–Ω–∏–µ –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–∞:", reply_markup=kb)


# üîò –û–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–∞–∂–∞—Ç–∏—è –Ω–∞ –∫–Ω–æ–ø–∫—É
@dp.callback_query_handler(lambda c: c.data == "make_tool")
async def handle_tool_request(callback_query: types.CallbackQuery):
    user_id = callback_query.from_user.id
    sessions[user_id] = {"history": [], "last_active": time.time()}  # –Ω–∞—á–∏–Ω–∞–µ–º —Å —á–∏—Å—Ç–æ–π –∏—Å—Ç–æ—Ä–∏–∏ –∏ –º–µ—Ç–∫–∏ –≤—Ä–µ–º–µ–Ω–∏
    await bot.send_message(user_id, "–ü—Ä–∏–≤–µ—Ç! –û–ø–∏—à–∏, –∫–∞–∫–æ–π –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç —Ç–µ–±–µ –Ω—É–∂–µ–Ω üß†")
    await callback_query.answer()


@dp.message_handler()
async def handle_message(message: types.Message):
    user_id = message.from_user.id
    text = message.text.strip().lower()
    logging.info(f"[handle_message] üì© –°–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç {user_id}: {text}")

    # –ü–æ–ª—É—á–∞–µ–º —Ä–µ–∂–∏–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    mode = user_modes.get(user_id, 'chat')
    logging.info(f"[handle_message] üîÑ –¢–µ–∫—É—â–∏–π —Ä–µ–∂–∏–º: {mode}")

    # === –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –ø–µ—Ä–µ—Ö–æ–¥–∞ –Ω–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏—é ===
    if mode == 'waiting_confirmation':
        if text in ['–≥–æ—Ç–æ–≤', '–≥–æ', '–¥–∞–≤–∞–π', '–ø–æ–µ—Ö–∞–ª–∏']:
            user_modes[user_id] = 'code'
            logging.info(f"[handle_message] ‚úÖ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –ø–æ–¥—Ç–≤–µ—Ä–¥–∏–ª ‚Äî –ø–µ—Ä–µ—Ö–æ–¥–∏–º –≤ —Ä–µ–∂–∏–º code.")
            await message.answer("üöÄ –û—Ç–ª–∏—á–Ω–æ! –¢–µ–ø–µ—Ä—å –ø–µ—Ä–µ—Ö–æ–¥–∏–º –∫ —Å–±–æ—Ä—É –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤ –∏ —Å–æ–∑–¥–∞–Ω–∏—é –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–∞.")
        else:
            logging.info(f"[handle_message] ‚è≥ –û–∂–∏–¥–∞–µ–º –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –æ—Ç {user_id}.")
            await message.answer("‚úã –ù–∞–ø–∏—à–∏ '–ì–æ—Ç–æ–≤', –µ—Å–ª–∏ —Ö–æ—á–µ—à—å –ø–µ—Ä–µ–π—Ç–∏ –∫ —Å–ª–µ–¥—É—é—â–µ–º—É —ç—Ç–∞–ø—É.")
        return

   # === –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∏—Å—Ç–æ—Ä–∏–∏ —Å–µ—Å—Å–∏–∏ —Å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ–º —Ñ—É–Ω–∫—Ü–∏–∏ update_user_session ===
    session = sessions.setdefault(user_id, {"history": [], "last_active": time.time()})
    update_user_session(user_id, text)
    session["last_active"] = time.time()
    combined_history = "\n".join([msg["content"] for msg in session["history"]])
    logging.info(f"[handle_message] üí¨ –ò—Å—Ç–æ—Ä–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}:\n{combined_history}")


    # === –ê–Ω–∞–ª–∏–∑ –∏–¥–µ–∏ ===
    logging.info(f"[handle_message] ‚è≥ –û—Ç–ø—Ä–∞–≤–∫–∞ –≤ summarize_requirements...")
    result = await summarize_requirements(combined_history, prompt_chat)

    reply = result.get('reply', "–ù–µ —Å–æ–≤—Å–µ–º –ø–æ–Ω—è–ª. –ú–æ–∂–µ—à—å –ø–µ—Ä–µ—Ñ–æ—Ä–º—É–ª–∏—Ä–æ–≤–∞—Ç—å?")
    params = result.get('params', {})
    
    ideas = result.get('params', {}).get('–≤–æ–ø—Ä–æ—Å—ã', [])
    ideas_text = "\n".join([f"üìå *{i['–Ω–∞–∑–≤–∞–Ω–∏–µ']}*\n{i['–æ–ø–∏—Å–∞–Ω–∏–µ']}" for i in ideas]) if ideas else ""
    reply_text = f"{reply}\n\n{ideas_text}" if ideas_text else reply

    logging.info(f"[handle_message] üì• –û—Ç–≤–µ—Ç –∞–Ω–∞–ª–∏–∑–∞ –∏–¥–µ–∏: {result}")

    status = result.get('status')

    # === –ü—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ –ø–µ—Ä–µ–π—Ç–∏ –∫ —Å–ª–µ–¥—É—é—â–µ–º—É —ç—Ç–∞–ø—É ===
    if status == 'ready_to_start_code_phase':
        user_modes[user_id] = 'waiting_confirmation'
        await message.answer(f"‚úÖ {reply} –ù–∞–ø–∏—à–∏ '–ì–æ—Ç–æ–≤', –µ—Å–ª–∏ —Ö–æ—á–µ—à—å –ø–µ—Ä–µ–π—Ç–∏ –∫ —Å–±–æ—Ä—É –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤.")
        return

    # === –ü–æ–ª–Ω–∞—è –≥–æ—Ç–æ–≤–Ω–æ—Å—Ç—å (–∞–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–∞, –µ—Å–ª–∏ –∏—Å–ø–æ–ª—å–∑—É–µ—à—å ready_to_generate) ===
    if status == 'ready_to_generate':
        user_modes[user_id] = 'waiting_confirmation'
        await message.answer(f"‚úÖ {reply} –ù–∞–ø–∏—à–∏ '–ì–æ—Ç–æ–≤', —á—Ç–æ–±—ã –Ω–∞—á–∞—Ç—å –≥–µ–Ω–µ—Ä–∞—Ü–∏—é –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–∞.")
        return

    # === –Æ–∑–µ—Ä –ø—Ä–æ—Å–∏—Ç –∏–¥–µ–∏ ===
    if status == 'need_more_info':
        if any(kw in text for kw in ['–ø—Ä–µ–¥–ª–æ–∂–∏', '–∏–¥–µ—é', '–∏–¥–µ–∏', '–≤–∞—Ä–∏–∞–Ω—Ç—ã', '–ø–æ–¥–∫–∏–Ω—å', '–Ω–µ –∑–Ω–∞—é']) and not result.get("params"):
            logging.info(f"[handle_message] üîç –û–±–Ω–∞—Ä—É–∂–µ–Ω –∑–∞–ø—Ä–æ—Å –Ω–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏—é –∏–¥–µ–π –æ—Ç {user_id}")

            suggestion_prompt = (
                "–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –ø–æ–∫–∞ –Ω–µ –æ–ø—Ä–µ–¥–µ–ª–∏–ª—Å—è —Å –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–æ–º. "
                "–ü—Ä–µ–¥–ª–æ–∂–∏ 3-5 –∏–¥–µ–π –ø–æ–ª–µ–∑–Ω—ã—Ö –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–æ–≤ –∏–ª–∏ —Å–∫—Ä–∏–ø—Ç–æ–≤ –Ω–∞ –æ—Å–Ω–æ–≤–µ –Ω–µ–π—Ä–æ—Å–µ—Ç–µ–π –∏–ª–∏ Python. "
                "–ö—Ä–∞—Ç–∫–æ –æ–ø–∏—à–∏ –Ω–∞–∑–Ω–∞—á–µ–Ω–∏–µ –∫–∞–∂–¥–æ–≥–æ, —á—Ç–æ–±—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –º–æ–≥ –≤—ã–±—Ä–∞—Ç—å."
            )
            suggestions = await analyze_message(suggestion_prompt, prompt_chat, mode="chat")
            logging.info(f"[handle_message] üí° –ò–¥–µ–∏, –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é:\n{suggestions}")

            # üß† –ü–æ–¥–¥–µ—Ä–∂–∫–∞ —Ñ–æ—Ä–º–∞—Ç–∞ JSON —Å –ø–æ–ª–µ–º params
            if isinstance(suggestions, dict):
                ideas = suggestions.get("params", {}).get("–≤–æ–ø—Ä–æ—Å—ã")
                if ideas:
                    text_response = "üß† –í–æ—Ç –Ω–µ—Å–∫–æ–ª—å–∫–æ –∏–¥–µ–π:\n"
                    for idea in ideas:
                        title = idea.get("–Ω–∞–∑–≤–∞–Ω–∏–µ", "–ë–µ–∑ –Ω–∞–∑–≤–∞–Ω–∏—è")
                        description = idea.get("–æ–ø–∏—Å–∞–Ω–∏–µ", "–ë–µ–∑ –æ–ø–∏—Å–∞–Ω–∏—è")
                        text_response += f"\nüìå *{title}*\n{description}\n"
                    await message.answer(text_response, parse_mode="Markdown")
                else:
                    await message.answer(suggestions.get("reply", "–ì–æ—Ç–æ–≤ –æ–±—Å—É–¥–∏—Ç—å –∏–¥–µ–∏!"))
            else:
                await message.answer(reply_text, parse_mode="Markdown")
            return

        # –ü—Ä–æ—Å—Ç–æ —É—Ç–æ—á–Ω–µ–Ω–∏–µ
        await message.answer(reply_text, parse_mode="Markdown")
        return

    # –ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π —Å—Ç–∞—Ç—É—Å
    logging.warning(f"[handle_message] ‚ö†Ô∏è –ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π —Å—Ç–∞—Ç—É—Å: {status}")
    await message.answer("‚ö†Ô∏è –ß—Ç–æ-—Ç–æ –ø–æ—à–ª–æ –Ω–µ —Ç–∞–∫. –ü–æ–ø—Ä–æ–±—É–π –ø–µ—Ä–µ—Ñ–æ—Ä–º—É–ª–∏—Ä–æ–≤–∞—Ç—å –∑–∞–ø—Ä–æ—Å.")




async def process_code_mode(message: types.Message):
    user_id = message.from_user.id
    text = message.text.strip()
    logging.info(f"[process_code_mode] –û–±—Ä–∞–±–æ—Ç–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è –≤ —Ä–µ–∂–∏–º–µ code –æ—Ç {user_id}: {text}")

    # –ü–æ–ª—É—á–∞–µ–º —Ü–µ–ª—å, —Å—Ñ–æ—Ä–º—É–ª–∏—Ä–æ–≤–∞–Ω–Ω—É—é —Ä–∞–Ω–µ–µ
    session = sessions.get(user_id, {})
    goal = session.get("goal", "–Ω–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç")

    prompt = prompt_code.replace("<<GOAL>>", goal)

    result = await summarize_code_details(text, prompt)
    reply = result.get("reply", "–ß—Ç–æ-—Ç–æ –ø–æ—à–ª–æ –Ω–µ —Ç–∞–∫ –ø—Ä–∏ —Å–æ—Å—Ç–∞–≤–ª–µ–Ω–∏–∏ –¢–ó.")

    await message.answer(reply)
    logging.info(f"[process_code_mode] –û—Ç–≤–µ—Ç –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {user_id}")

        

# üßπ –ê–í–¢–û–û–ß–ò–°–¢–ö–ê –°–ï–°–°–ò–ô
async def cleanup_sessions():
    while True:
        now = time.time()
        to_delete = []

        for user_id, session in list(sessions.items()):
            if now - session["last_active"] > 3600:  # 1 —á–∞—Å –Ω–µ–∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏
                to_delete.append(user_id)

        for user_id in to_delete:
            sessions.pop(user_id, None)
            logging.info(f"üóëÔ∏è –£–¥–∞–ª–µ–Ω–∞ —Å–µ—Å—Å–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id} –∏–∑-–∑–∞ –Ω–µ–∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏.")
        await asyncio.sleep(600)  # –∫–∞–∂–¥—ã–µ 10 –º–∏–Ω



# üåê Flask-—Å–µ—Ä–≤–µ—Ä –¥–ª—è Render
@app.route("/")
def index():
    return "ToolBot —Ä–∞–±–æ—Ç–∞–µ—Ç!"


# üöÄ –ì–ª–∞–≤–Ω–∞—è —Ç–æ—á–∫–∞ –≤—Ö–æ–¥–∞
async def main():
    asyncio.create_task(cleanup_sessions())  # –∞–≤—Ç–æ–æ—á–∏—Å—Ç–∫–∞
    asyncio.create_task(ping_render())
    await dp.start_polling()

def run_flask():
    app.run(host="0.0.0.0", port=int(os.environ.get("PORT", 5000)))

if __name__ == "__main__":
    Thread(target=run_flask).start()  # –∑–∞–ø—É—Å–∫ Flask –≤ —Ñ–æ–Ω–µ
    asyncio.run(main())  # –∑–∞–ø—É—Å–∫ aiogram –∫–∞–∫ –æ—Å–Ω–æ–≤–Ω–æ–π –∑–∞–¥–∞—á–∏


