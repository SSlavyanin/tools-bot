import os
import sqlite3
import asyncio
import nest_asyncio
nest_asyncio.apply()
import logging
import httpx
from flask import Flask, request, jsonify, send_file
from zipfile import ZipFile
from io import BytesIO

sessions = {}  # –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å —Å–Ω–∞—Ä—É–∂–∏
zip_storage = {}  # user_id: BytesIO

# üîê –ü–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è
OPENROUTER_API_KEY = os.getenv("OPENROUTER_API_KEY")
AILEX_SHARED_SECRET = os.getenv("AILEX_SHARED_SECRET")


# üöÄ Flask –∏ –ª–æ–≥–≥–∏—Ä–æ–≤–∞–Ω–∏–µ
app = Flask(__name__)
logging.basicConfig(level=logging.INFO)

# üì¶ –ë–î –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–æ–≤
DB_PATH = "tools.db"

# üß† –ü–∞–º—è—Ç—å –¥–ª—è –∞–∫—Ç–∏–≤–Ω—ã—Ö —Å–µ—Å—Å–∏–π (—É–ø—Ä–æ—â—ë–Ω–Ω–æ ‚Äî –≤ –ø–∞–º—è—Ç–∏)
sessions = {}  # {"user_id": {task, input_example, language, output, step}}

# üìå –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
def init_db():
    if not os.path.exists(DB_PATH):
        conn = sqlite3.connect(DB_PATH)
        c = conn.cursor()
        c.execute('''
            CREATE TABLE tools (
                id INTEGER PRIMARY KEY AUTOINCREMENT,
                name TEXT,
                description TEXT,
                code TEXT,
                task TEXT,
                language TEXT,
                platform TEXT
            )
        ''')
        conn.commit()
        conn.close()

init_db()

# üíæ –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–∞ –≤ –ë–î
def save_tool(name, description, code, task, language, platform):
    conn = sqlite3.connect(DB_PATH)
    c = conn.cursor()
    c.execute('''
        INSERT INTO tools (name, description, code, task, language, platform)
        VALUES (?, ?, ?, ?, ?, ?)
    ''', (name, description, code, task, language, platform))
    conn.commit()
    conn.close()

# üîç –ü–æ–∏—Å–∫ –ø–æ—Ö–æ–∂–∏—Ö –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–æ–≤ –ø–æ –∑–∞–¥–∞—á–µ
def find_similar_tools(task):
    conn = sqlite3.connect(DB_PATH)
    c = conn.cursor()
    c.execute("SELECT id, name, description FROM tools WHERE task LIKE ?", ('%' + task + '%',))
    result = c.fetchall()
    conn.close()
    return result

# üß† –û—Ç–≤–µ—Ç –æ—Ç —Ç—É–ª—Å-–±–æ—Ç–∞ –ø–æ—Å–ª–µ –ø–µ—Ä–≤–æ–≥–æ –≤–æ–ø—Ä–æ—Å–∞ 
def generate_tools_suggestion(task):
    # –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –∏–¥–µ–π –¥–ª—è –æ—Ç–≤–µ—Ç–∞ –Ω–∞ –æ—Å–Ω–æ–≤–µ –∑–∞–¥–∞—á–∏
    suggestions = {
        "–≥–µ–Ω–µ—Ä–∞—Ç–æ—Ä –ø–∞—Ä–æ–ª–µ–π": [
            "–ì–µ–Ω–µ—Ä–∞—Ü–∏—è —Å–ª—É—á–∞–π–Ω—ã—Ö –ø–∞—Ä–æ–ª–µ–π —Å –∑–∞–¥–∞–Ω–Ω–æ–π –¥–ª–∏–Ω–æ–π.",
            "–ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ —Å–æ–∑–¥–∞–Ω–∏–µ –ø–∞—Ä–æ–ª–µ–π –¥–ª—è —Ä–∞–∑–Ω—ã—Ö —Å–µ—Ä–≤–∏—Å–æ–≤."
        ],
        "–∫–æ–Ω–≤–µ—Ä—Ç–µ—Ä –≤–∞–ª—é—Ç": [
            "–ö–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏—è –≤–∞–ª—é—Ç –ø–æ –∞–∫—Ç—É–∞–ª—å–Ω–æ–º—É –∫—É—Ä—Å—É.",
            "–ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ –∫—É—Ä—Å–µ."
        ],
        "–≥–µ–Ω–µ—Ä–∞—Ç–æ—Ä –ø–æ—Å—Ç–æ–≤": [
            "–ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∞—è –≥–µ–Ω–µ—Ä–∞—Ü–∏—è —Ç–µ–∫—Å—Ç–æ–≤ –¥–ª—è –ø–æ—Å—Ç–æ–≤ –≤ Telegram.",
            "–ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞ –∫–æ–Ω—Ç–µ–Ω—Ç–∞ –¥–ª—è —Å–æ—Ü–∏–∞–ª—å–Ω—ã—Ö —Å–µ—Ç–µ–π."
        ]
    }
    
    return suggestions.get(task, ["–£—Ç–æ—á–Ω–∏—Ç–µ –∑–∞–¥–∞—á—É."])

# üõ† –ü–µ—Ä–≤—ã–π –≤—Ö–æ–¥: –≥–µ–Ω–µ—Ä–∞—Ü–∏—è –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–∞ –∏–ª–∏ –∑–∞–ø—É—Å–∫ –¥–∏–∞–ª–æ–≥–∞
@app.route("/generate_tool", methods=["POST"])
def generate_tool():
    data = request.get_json()
    user_id = str(data.get("user_id", "anonymous"))
    task = data.get("task", "")

    # üîé –ü–æ–∏—Å–∫ –ø–æ—Ö–æ–∂–∏—Ö
    similar = find_similar_tools(task)
    if similar:
        return jsonify({
            "status": "found",
            "message": "–ù–∞—à—ë–ª –ø–æ—Ö–æ–∂–∏–µ –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç—ã. –•–æ—Ç–∏—Ç–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –æ–¥–∏–Ω –∏–∑ –Ω–∏—Ö –∏–ª–∏ —É—Ç–æ—á–Ω–∏—Ç—å –∑–∞–¥–∞—á—É?",
            "tools": [{"id": t[0], "name": t[1], "description": t[2]} for t in similar]
        })

    # üß† –ó–∞–ø—É—Å–∫ –Ω–æ–≤–æ–π —Å–µ—Å—Å–∏–∏
    sessions[user_id] = {
        "task": task,
        "step": 1,
        "answers": {}
    }

     # üßë‚Äçüíª –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –∏–¥–µ–π –æ—Ç Tools
    suggestions = generate_tools_suggestion(task)
    

    return jsonify({
        "status": "ask",
        "message": "‚ùì –ß—Ç–æ–±—ã —Å–æ–±—Ä–∞—Ç—å –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç, –Ω—É–∂–Ω—ã —É—Ç–æ—á–Ω–µ–Ω–∏—è:\n1. –ß—Ç–æ –¥–æ–ª–∂–µ–Ω –¥–µ–ª–∞—Ç—å –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç?",
        "step": 1
    })

# üí¨ –ü—Ä–æ–¥–æ–ª–∂–µ–Ω–∏–µ –¥–∏–∞–ª–æ–≥–∞ (–ø–æ —à–∞–≥–∞–º)
@app.route("/answer_tool", methods=["POST"])
def answer_tool():
    data = request.json
    user_id = data.get("user_id", "anonymous")
    answer = data.get("answer", "").strip()

    session = sessions.get(user_id)
    if not session:
        return jsonify({"status": "error", "message": "–°–µ—Å—Å–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω–∞. –ù–∞—á–Ω–∏—Ç–µ —Å /generate_tool."})

    step = session.get("step", 1)

    if step == 1:
        session["task"] = answer
        session["step"] = 2
        return jsonify({
            "message": "2. –ü—Ä–∏–º–µ—Ä –≤—Ö–æ–¥–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö?",
            "step": 2
        })
    elif step == 2:
        session["input_example"] = answer
        session["step"] = 3
        return jsonify({
            "message": "3. –Ø–∑—ã–∫ –∏–ª–∏ –ø–ª–∞—Ç—Ñ–æ—Ä–º–∞?",
            "step": 3
        })
    elif step == 3:
        session["language"] = answer
        session["step"] = 4
        return jsonify({
            "message": "4. –ß—Ç–æ –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å –Ω–∞ –≤—ã—Ö–æ–¥–µ?",
            "step": 4
        })
    elif step == 4:
        session["output"] = answer

        # üß† –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –∫–æ–¥–∞-–∑–∞–≥–ª—É—à–∫–∏
        code = (
            f"# –ò–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç: {session['task']}\n"
            f"# –í—Ö–æ–¥: {session['input_example']}\n"
            f"# –Ø–∑—ã–∫: {session['language']}\n"
            f"# –í—ã—Ö–æ–¥: {session['output']}\n\n"
            f"print('–ì–æ—Ç–æ–≤—ã–π –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç!')"
        )

        # üíæ –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ zip
        zip_buffer = BytesIO()
        with ZipFile(zip_buffer, 'w') as zip_file:
            zip_file.writestr(f"{session['task']}.py", code)
        zip_buffer.seek(0)

        # üóÉ –°–æ—Ö—Ä–∞–Ω—è–µ–º –∞—Ä—Ö–∏–≤ –≤ zip_storage
        zip_storage[user_id] = zip_buffer

        # üßπ –ß–∏—Å—Ç–∏–º —Å–µ—Å—Å–∏—é
        del sessions[user_id]

        return jsonify({
            "status": "done",
            "result": f"‚úÖ –ò–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç —Å–æ–±—Ä–∞–Ω! <a href='https://tools-bot.onrender.com/download_tool/{user_id}'>–°–∫–∞—á–∞—Ç—å –∞—Ä—Ö–∏–≤</a>"
        })
# —Ä–æ—É—Ç –¥–ª—è –∑–∞–≥—Ä—É–∑–∫–∏ –∞—Ä—Ö–∏–≤–∞
@app.route("/download_tool/<user_id>")
def download_tool(user_id):
    buffer = zip_storage.get(user_id)
    if not buffer:
        return "–ê—Ä—Ö–∏–≤ –Ω–µ –Ω–∞–π–¥–µ–Ω", 404
    return send_file(buffer, as_attachment=True, download_name=f"{user_id}_tool.zip")


# üè† –°—Ç–∞—Ç—É—Å
@app.route("/")
def home():
    return "Tools API running!"

# ‚ñ∂Ô∏è –ó–∞–ø—É—Å–∫ —Å–µ—Ä–≤–µ—Ä–∞
if __name__ == "__main__":
    port = int(os.environ.get("PORT", 5000))
    app.run(host="0.0.0.0", port=port)
