import os
import logging
from flask import Flask, request, jsonify, send_file
from zipfile import ZipFile
from io import BytesIO
import httpx

app = Flask(__name__)
logging.basicConfig(level=logging.INFO)

OPENROUTER_API_KEY = os.getenv("OPENROUTER_API_KEY")
AILEX_SHARED_SECRET = os.getenv("AILEX_SHARED_SECRET")

zip_storage = {}
sessions = {}  # üÜï –•—Ä–∞–Ω–∏–ª–∏—â–µ —Å–µ—Å—Å–∏–π

# üîç OpenRouter-–∑–∞–ø—Ä–æ—Å
async def analyze_message(message: str):
    prompt = [
        {"role": "system", "content": "–¢—ã –ò–ò-–ø–æ–º–æ—â–Ω–∏–∫. –ü–æ–ª—É—á–∏ —Ç–µ–∫—Å—Ç –∑–∞–¥–∞—á–∏ –∏ –æ–ø—Ä–µ–¥–µ–ª–∏, –∫–∞–∫–æ–π –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç –Ω—É–∂–Ω–æ —Å–æ–∑–¥–∞—Ç—å. –í–µ—Ä–Ω–∏ JSON —Å –ø–æ–ª—è–º–∏ task –∏ params."},
        {"role": "user", "content": message}
    ]
    headers = {
        "Authorization": f"Bearer {OPENROUTER_API_KEY}",
        "Content-Type": "application/json"
    }
    payload = {
        "model": "openchat/openchat-7b",  # –ú–æ–∂–Ω–æ –∑–∞–º–µ–Ω–∏—Ç—å –Ω–∞ –¥—Ä—É–≥–æ–π
        "messages": prompt
    }

    async with httpx.AsyncClient() as client:
        response = await client.post("https://openrouter.ai/api/v1/chat/completions", json=payload, headers=headers)
        result = response.json()
        content = result["choices"][0]["message"]["content"]
        logging.info(f"[OpenRouter] –û—Ç–≤–µ—Ç: {content}")
        return eval(content)  # –ü—Ä–æ—Å—Ç–æ–π –ø–∞—Ä—Å–∏–Ω–≥ —Å–ª–æ–≤–∞—Ä—è –∏–∑ —Å—Ç—Ä–æ–∫–∏

# üÜï –ü—Ä–æ–≤–µ—Ä–∫–∞ –≥–æ—Ç–æ–≤–Ω–æ—Å—Ç–∏ –∫ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏
def ready_to_generate(history):
    text = " ".join(history).lower()
    return len(history) > 2 and any(kw in text for kw in ["—Å–¥–µ–ª–∞–π", "–Ω—É–∂–Ω–æ", "–±–æ—Ç", "–∫–æ–¥", "–∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç"])

@app.route("/generate_tool", methods=["POST"])
def generate_tool():
    from asyncio import run

    data = request.get_json()
    if request.headers.get("Ailex-Shared-Secret") != AILEX_SHARED_SECRET:
        return jsonify({"status": "error", "message": "‚õî –ù–µ–≤–µ—Ä–Ω—ã–π —Å–µ–∫—Ä–µ—Ç. ü§ñ (t—É–ª—Å-–±–æ—Ç)"}), 403

    user_id = str(data.get("user_id", "anonymous"))
    message = data.get("message", "").strip()

    if not message:
        return jsonify({"status": "error", "message": "–ü—É—Å—Ç–æ–π –∑–∞–ø—Ä–æ—Å. ü§ñ (t—É–ª—Å-–±–æ—Ç)"})

    # üÜï –û–±—Ä–∞–±–æ—Ç–∫–∞ –∏—Å—Ç–æ—Ä–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    history = sessions.setdefault(user_id, {"history": []})["history"]
    history.append(message)

    if not ready_to_generate(history):
        if len(history) == 1:
            return jsonify({"status": "ok", "message": "üëã –ü—Ä–∏–≤–µ—Ç! –ß—Ç–æ —Ö–æ—á–µ—à—å, —á—Ç–æ–±—ã —è —Å–¥–µ–ª–∞–ª?"})
        else:
            return jsonify({"status": "ok", "message": "üõ† –£—Ç–æ—á–Ω–∏, —á—Ç–æ –∏–º–µ–Ω–Ω–æ –Ω—É–∂–Ω–æ. –Ø –ø–æ–∫–∞ —Å–ª—É—à–∞—é."})

    try:
        # üß† AI-–∞–Ω–∞–ª–∏–∑ —Å–æ–æ–±—â–µ–Ω–∏—è
        result = run(analyze_message(" ".join(history)))
        task = result.get("task", "–∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç")
        params = result.get("params", {})

        # üõ† –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –∫–æ–¥–∞
        code = f"# –ó–∞–¥–∞—á–∞: {task}\n# –ü–∞—Ä–∞–º–µ—Ç—Ä—ã: {params}\n\nprint('–ò–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç –≥–æ—Ç–æ–≤')"

        zip_buffer = BytesIO()
        with ZipFile(zip_buffer, 'w') as zip_file:
            zip_file.writestr(f"{task.replace(' ', '_')}.py", code)
        zip_buffer.seek(0)
        zip_storage[user_id] = zip_buffer

        return jsonify({
            "status": "done",
            "message": f"ü§ñ (t—É–ª—Å-–±–æ—Ç) ‚úÖ –ò–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç –≥–æ—Ç–æ–≤! <a href='https://tools-bot.onrender.com/download_tool/{user_id}'>–°–∫–∞—á–∞—Ç—å –∞—Ä—Ö–∏–≤</a>"
        })

    except Exception as e:
        logging.exception("–û—à–∏–±–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏")
        return jsonify({"status": "error", "message": f"ü§ñ (t—É–ª—Å-–±–æ—Ç) –û—à–∏–±–∫–∞: {str(e)}"})

@app.route("/download_tool/<user_id>")
def download_tool(user_id):
    buffer = zip_storage.get(user_id)
    if not buffer:
        return "–ê—Ä—Ö–∏–≤ –Ω–µ –Ω–∞–π–¥–µ–Ω", 404
    return send_file(buffer, as_attachment=True, download_name=f"{user_id}_tool.zip")

@app.route("/")
def home():
    return "ü§ñ Tools API (—Å –ò–ò) —Ä–∞–±–æ—Ç–∞–µ—Ç!"

if __name__ == "__main__":
    port = int(os.environ.get("PORT", 5000))
    app.run(host="0.0.0.0", port=port)
